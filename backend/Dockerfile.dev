# Development Dockerfile for Go backend
FROM golang:1.23-alpine AS builder

# Install git for go modules and migration tool
RUN apk add --no-cache git curl postgresql-client

# Install golang-migrate
RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz && \
    mv migrate /usr/local/bin/

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN go build -o bin/server cmd/server/main.go

# Development stage with hot reload support
FROM golang:1.23-alpine

# Install postgresql client and migration tool
RUN apk add --no-cache postgresql-client curl bash && \
    curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz && \
    mv migrate /usr/local/bin/

WORKDIR /app

# Copy the source code
COPY . .

# Download dependencies
RUN go mod download

# Expose port
EXPOSE 8081

# Create a simple startup script
RUN echo '#!/bin/bash\n\
    set -e\n\
    echo "Starting Ditto Go Backend..."\n\
    echo "Waiting for database connection..."\n\
    until pg_isready -h db -p 5432 -U ditto_user -d ditto_dev; do\n\
    echo "Database is unavailable - sleeping"\n\
    sleep 1\n\
    done\n\
    echo "Database is ready!"\n\
    echo "Running database migrations..."\n\
    if migrate -path migrations -database "$DATABASE_URL" up; then\n\
    echo "Migrations completed successfully"\n\
    else\n\
    echo "Migration failed, but continuing..."\n\
    fi\n\
    echo "Starting in development mode..."\n\
    go mod download\n\
    exec go run cmd/server/main.go' > /usr/local/bin/start.sh && \
    chmod +x /usr/local/bin/start.sh

# Start the application
CMD ["/usr/local/bin/start.sh"]
